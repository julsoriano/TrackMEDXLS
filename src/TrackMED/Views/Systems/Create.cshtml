@model TrackMED.Models.SystemTab

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>
<style>
    .hidden { 
        display: none;
    }

    .strikethrough { 
        text-decoration: line-through;
        opacity: 0.5;
    }

    td, th {
        border-bottom: 1px solid #333333;
        padding: 6px 16px;
        text-align: left;
    }

    .custom-combobox {
        position: relative;
        display: inline-block;
    }

    .custom-combobox-toggle {
        position: absolute;
        top: 0;
        bottom: 0;
        margin-left: -1px;
        padding: 0;
    }

    .custom-combobox-input {
        margin: 0;
        padding: 5px 10px;
    }
</style>
<!--
<script type="text/javascript">

    // http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/
    'use strict';

    (function ($) {
        $.widget("custom.combobox", {
            _create: function () {
                this.wrapper = $("<span>")
                  .addClass("custom-combobox")
                  .insertAfter(this.element);

                this.element.hide();
                this._createAutocomplete();
                this._createShowAllButton();
            },

            _createAutocomplete: function () {
                var selected = this.element.children(":selected"),
                  value = selected.val() ? selected.text() : "";

                this.input = $("<input>")
                  .appendTo(this.wrapper)
                  .val(value)
                  .attr("title", "")
                  .addClass("custom-combobox-input ui-widget ui-widget-content ui-state-default ui-corner-left")
                  .autocomplete({
                      delay: 0,
                      minLength: 0,
                      source: $.proxy(this, "_source")
                  })
                  .tooltip({
                      tooltipClass: "ui-state-highlight"
                  });

                this._on(this.input, {
                    autocompleteselect: function (event, ui) {
                        ui.item.option.selected = true;
                        this._trigger("select", event, {
                            item: ui.item.option
                        });
                    },

                    autocompletechange: "_removeIfInvalid"
                });
            },

            _createShowAllButton: function () {
                var input = this.input,
                  wasOpen = false;

                $("<a>")
                  .attr("tabIndex", -1)
                  .attr("title", "Show All Items")
                  .tooltip()
                  .appendTo(this.wrapper)
                  .button({
                      icons: {
                          primary: "ui-icon-triangle-1-s"
                      },
                      text: false
                  })

                  .removeClass("ui-corner-all")
                  .addClass("custom-combobox-toggle ui-corner-right")
                  .mousedown(function () {
                      wasOpen = input.autocomplete("widget").is(":visible");
                  })
                  .click(function () {
                      input.focus();

                      // Close if already visible
                      if (wasOpen) {
                          return;
                      }

                      // Pass empty string as value to search for, displaying all results
                      input.autocomplete("search", "");
                  });
            },

            _source: function (request, response) {
                var matcher = new RegExp($.ui.autocomplete.escapeRegex(request.term), "i");
                response(this.element.children("option").map(function () {
                    var text = $(this).text();
                    if (this.value && (!request.term || matcher.test(text)))
                        return {
                            label: text,
                            value: text,
                            option: this
                        };
                }));
            },

            _removeIfInvalid: function (event, ui) {

                // Selected an item, nothing to do
                if (ui.item) {
                    return;
                }

                // Search for a match (case-insensitive)
                var value = this.input.val(),
                  valueLowerCase = value.toLowerCase(),
                  valid = false;

                this.element.children("option").each(function () {
                    if ($(this).text().toLowerCase() === valueLowerCase) {
                        this.selected = valid = true;
                        return false;
                    }
                });

                // Found a match, nothing to do
                if (valid) {
                    return;
                }

                // Remove invalid value
                this.input
                  .val("")
                  .attr("title", value + " didn't match any item")
                  .tooltip("open");

                this.element.val("");
                this._delay(function () {
                    this.input.tooltip("close").attr("title", "");
                }, 2500);
                this.input.autocomplete("instance").term = "";
            },

            _destroy: function () {
                this.wrapper.remove();
                this.element.show();
            }
        });
    })(jQuery);

    /*
    $(function () {
        $("#ComponentID").combobox(); // jQuery
        $('#ComponentDescID').select2(); // Select2
        $('#ComponentID').select2(); // Select2
    }); 
    */

    // This function supposedly hides the option but has problems with it
    // See 'How to Hide a <option> in a <select> menu with CSS' http://stackoverflow.com/questions/9234830/how-to-hide-a-option-in-a-select-menu-with-css
    // To use: $("#ComponentID option:selected").toggleOption(false);
    jQuery.fn.toggleOption = function (show) {
        jQuery(this).toggle(show);
        if (show) {
            if (jQuery(this).parent('span.toggleOption').length)
                jQuery(this).unwrap();
        } else {
            if (jQuery(this).parent('span.toggleOption').length == 0)
                jQuery(this).wrap('<span class="toggleOption" style="display: none;" />');
        }
    };

</script>
-->

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="form-horizontal">
        <h4>System Table</h4>
        <hr />

        <div class="form-group">
            @Html.LabelFor(model => model.imte, htmlAttributes: new { @class = "control-label col-md-2" })
            @* @Html.Label("IMTE", "IMTE", htmlAttributes: new { @class = "control-label col-md-2" }) *@
            <div class="col-md-10">
                @Html.EditorFor(model => model.imte, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.imte, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.serialnumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.serialnumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.serialnumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ReferenceNo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ReferenceNo, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ReferenceNo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SystemsDescription.Desc, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("SystemsDescriptionID", null, "Select One", htmlAttributes: new { @class = "form-control", @readonly = "readonly" })
                @Html.ValidationMessageFor(model => model.SystemsDescriptionID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Owner.Desc, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("OwnerID", null, "Select One", htmlAttributes: new { @class = "form-control", @readonly = "readonly" })
                @Html.ValidationMessageFor(model => model.OwnerID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Location.Desc, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("LocationID", null, "Select One", htmlAttributes: new { @class = "form-control", @readonly = "readonly" })
                @Html.ValidationMessageFor(model => model.LocationID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ReferenceNo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ReferenceNo, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ReferenceNo, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2" for="SubModule">SubModule</label>
            <div class="col-md-10">
                <label for="SubModule0" class="radio-inline" id="Left">
                    <input class="moduleRadio" type="radio" id="SubModule0" name="SubModule" value="0" checked="checked">Left
                </label>
                <label for="SubModule1" class="radio-inline" id="Right">
                    <input class="moduleRadio" type="radio" id="SubModule1" name="SubModule" value="1">Right
                </label>
            </div>
        </div>

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Notes, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Notes, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Notes, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Component Description", "Component Description", htmlAttributes: new { @class = "control-label col-md-2" }) 
            <div class="col-md-10">
                @* @Html.DropDownList("ComponentDescID", null, "Select a Description", htmlAttributes: new { @class = "form-control" }) *@
                @Html.DropDownList("ComponentDescID", null, "Select a Description", htmlAttributes: new { @class = "form-control", @onchange = "showComponentDDL(this.form);" })
            </div>
        </div>

        @*@Html.HiddenFor(model => model.userListId, new { id = "userListIdHidden" }); *@

        <div class="form-group hidden">
            @Html.Label("Component", "Component", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10" id="divComponent">
                <!-- <select class="form-control valid" id="ComponentID" name="ComponentID" ></select> -->
                <select class="form-control valid" id="ComponentID" name="ComponentID" onchange="addIMTE(this.form);"></select>
                <!-- This block of code creates the component list. It works but the lookup key is hard coded; it will be nice if we can find a way 
                     to soft code e.g., key: $(ComponentDescID.selected) -->
                @*@{
                    if (ViewBag.LookUp != null)
                    { 
                        id ="CompContainer" class="form-group" style="display:none;
                        //ILookup<string, TrackMED.Models.Component> lookup = ViewBag.LookUp;
                        ViewBag.ComponentID = new SelectList(ViewBag.LookUp[key: "Thermal Mass Flow Meter"], "Id", "IMTECalDate");
                        @Html.DropDownList("ComponentID", null, "Select a Component", htmlAttributes: new { @class = "form-control", @onchange = "addIMTE(this.form);" })
                    }
                }*@
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <table name="imteX" id="imteX">
                    <tbody>
                        @{
                            if (ViewBag.leftComponents != null || ViewBag.rightComponents != null)
                            {    
                                @:<tr>
                                    @:<th>IMTE</th>
                                    @:<th>Description</th>
                                    @:<th>Calibration Date</th>
                                    @:<th>Maintenance Date</th>
                                    @:<th>Orientation</th>
                                @:</tr><tr>
                        
                                List<TrackMED.Models.Component> leftComponents = ViewBag.leftComponents;
                                string left = "0";
                                foreach (var l in leftComponents)
                                {
                                    @: <td> 
                                            <input type="text"
                                                    name="selectedIMTEs" 
                                                    value="@left@l.Id"
                                                    hidden > 
                                    @l.imte  @: </td><td>
                                    @l.Description.Desc  @: </td>

                                    if (l.CalibrationDate != null)
                                    {
                                        var ltime = ((DateTime)l.CalibrationDate).ToShortDateString();
                                        @:<td> @ltime              </td>
                                    }
                                    else
                                    {
                                        @:<td></td>
                                    }

                                    if (l.MaintenanceDate != null)
                                    {
                                        var ltime = ((DateTime)l.MaintenanceDate).ToString("dd-MMM-yy");
                                        @:<td> @ltime              </td>
                                    }
                                    else
                                    {
                                        @:<td></td>
                                    }

                                    @: <td>  Left                 </td>
                                    @: <td>  <a href="#" class="remove" rel="@l.Id">Remove</a>     </td>
                                    @: </tr><tr>
                                }

                                List<TrackMED.Models.Component> rightComponents = ViewBag.rightComponents;
                                string right = "1";
                                foreach (var r in rightComponents)
                                {
                                    @: <td>  
                                            <input type="text"
                                                   name="selectedIMTEs"
                                                   value="@right@r.Id" 
                                                   hidden >
                                    @r.imte  @: </td><td>
                                    @r.Description.Desc  @: </td>

                                    if (r.CalibrationDate != null)
                                    {
                                        var rtime = ((DateTime)r.CalibrationDate).ToShortDateString();
                                        @:<td> @rtime              </td>
                                    }
                                    else
                                    {
                                        @:<td></td>
                                    }

                                    if (r.MaintenanceDate != null)
                                    {
                                        var rtime = ((DateTime)r.MaintenanceDate).ToString("dd-MMM-yy");
                                        @:<td> @rtime              </td>
                                    }
                                    else
                                    {
                                        @:<td></td>
                                    }

                                    @: <td>  Right                </td>
                                    @: <td>  @Html.ActionLink("Remove", "Remove", new { id = @r.Id })     </td>
                                    @: </tr><tr>
                                }
                                @: </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" name="typeSubmit" value="Create" class="btn btn-default" /> |
                <input type="submit" name="typeSubmit" value="Deploy" class="btn btn-default" />
            </div>
        </div>  
         
   </div>   
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}